@model Koggo.Client.Models.Home.ServicesModel

<!DOCTYPE html>
<html>
<head>
    <title>Create User Services</title>
    <style>
        /* Add CSS styles for the popup container */
        .popup-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1;
        }

        /* Style for the popup form */
        .popup-form {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 100px auto;
            padding: 20px;
        }

        /* Additional styles for the form items */
        .item {
            margin-bottom: 20px;
        }

        label {
            font-weight: bold;
            color: #333;
            display: block;
            margin-bottom: 5px;
        }

        input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            background-color: #f9f9f9;
        }

            input[type="text"]:focus {
                outline: none;
                border-color: #007bff;
            }

        input[type="submit"] {
            background-color: #008CBA;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            border-radius: 4px;
            cursor: pointer;
            transition-duration: 0.4s;
        }

            input[type="submit"]:hover {
                background-color: #005f5f;
            }
    </style>
</head>
<body>
    <div>
        <h1>Create User Services</h1>
        <!-- Add a button to trigger the popup -->
        <button id="openPopup">Open Popup</button>
    </div>

    <!-- Create a popup container -->
    <div class="popup-container" id="popupContainer">
        <div class="popup-form">
            <h1>Create User Services</h1>
            <form method="post" asp-controller="UserServices" asp-action="Create" enctype="multipart/form-data" class="styled-form">
                <div class="item">
                    <label for="ServiceId">Service ID:</label>
                    <select name="ServiceId" required class="styled-input">
                        @foreach (var service in Model.Services)
                        {
                            <option value="@service.Id">@service.Name</option>
                        }
                    </select>
                </div>
                <div class="item">
                    <label for="Price">Price:</label>
                    <!-- Use type="text" for price input -->
                    <input type="text" name="Price" id="priceInput" required class="styled-input">
                </div>
                <div class="item">
                    <label for="ThumbNailPhoto">Thumbnail Photo:</label>
                    <input type="file" name="ThumbNailPhoto" id="thumbnailInput" accept="image/*" required class="styled-input">
                    <!-- Hidden input to store the Base64 data -->
                    <input type="hidden" name="ThumbNailPhotoBase64" id="thumbnailBase64" />
                    <!-- Display the image preview -->
                    <img id="thumbnailPreview" src="" alt="Thumbnail Preview" style="max-width: 100px; display: none;">
                </div>
                <div class="item">
                    <label for="AvailableStartHour">Available Start Hour:</label>
                    <!-- Use type="time" for time input -->
                    <input type="time" name="AvailableStartHour" required class="styled-input">
                </div>
                <div class="item">
                    <label for="AvailableEndHour">Available End Hour:</label>
                    <!-- Use type="time" for time input -->
                    <input type="time" name="AvailableEndHour" required class="styled-input">
                </div>
                <input type="submit" value="Create" class="styled-submit">
            </form>

            <style>
                /* Custom CSS styles for the form */
                .styled-form {
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #f5f5f5;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }

                .styled-input {
                    width: 100%;
                    padding: 12px;
                    margin-bottom: 20px;
                    border: 1px solid #ccc;
                    border-radius: 4px;
                    font-size: 16px;
                }

                    .styled-input:focus {
                        outline: none;
                        border-color: #007bff;
                    }

                .styled-submit {
                    background-color: #007bff;
                    border: none;
                    color: white;
                    padding: 15px 32px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    margin-top: 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    transition-duration: 0.4s;
                }

                    .styled-submit:hover {
                        background-color: #005f5f;
                    }
            </style>


            <script>
                // Format the price input as a money format
                const priceInput = document.getElementById('priceInput');
                priceInput.addEventListener('input', function () {
                    // Remove non-numeric characters and format as currency
                    const value = this.value.replace(/[^0-9.]/g, '');
                    this.value = formatAsCurrency(value);
                });

                // Function to format a number as currency (e.g., 1234.56 as $1,234.56)
                function formatAsCurrency(number) {
                    const formatter = new Intl.NumberFormat('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                    });
                    return formatter.format(number);
                }
            </script>

            <script>
                // JavaScript to handle file input change event and convert the selected file to Base64
                const thumbnailInput = document.getElementById('thumbnailInput');
                const thumbnailBase64 = document.getElementById('thumbnailBase64');
                const thumbnailPreview = document.getElementById('thumbnailPreview');

                thumbnailInput.addEventListener('change', function () {
                    const file = thumbnailInput.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const base64Data = e.target.result.split(',')[1];
                            thumbnailBase64.value = base64Data;
                            thumbnailPreview.src = e.target.result;
                            thumbnailPreview.style.display = 'block';
                        };
                        reader.readAsDataURL(file);
                    }
                });
            </script>
            <button id="closePopup">Close Popup</button>
        </div>
    </div>

    <script>
        // JavaScript to handle opening and closing the popup
        const openButton = document.getElementById('openPopup');
        const closeButton = document.getElementById('closePopup');
        const popupContainer = document.getElementById('popupContainer');

        openButton.addEventListener('click', () => {
            popupContainer.style.display = 'block';
        });

        closeButton.addEventListener('click', () => {
            popupContainer.style.display = 'none';
        });
    </script>
</body>
</html>
